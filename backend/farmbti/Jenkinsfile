pipeline {
    agent any

    environment {
        DOCKER_HUB_USERNAME = "nageum"
        IMAGE_NAME = "farmbti_backend"
        CONTAINER_NAME = "farmbti-backend"
        PORT = "8081"
        GIT_CREDENTIALS_ID = 'gitlab-credentials'
        DOCKER_CREDENTIALS_ID = 'docker-hub'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/backend']],
                    userRemoteConfigs: [[
                    url: 'https://lab.ssafy.com/s12-bigdata-dist-sub1/S12P21D209.git',
                    credentialsId: 'gitlab-credentials'
                    ]]
                ])
            }
        }

        stage('Load .env File') {
            steps {
                configFileProvider([configFile(fileId: 'env-config', targetLocation: 'backend/farmbti/.env')]) {
                    script {
                        sh '''
                        #!/bin/bash
                        set -e
                        echo "✅ .env 파일 로드 중..."
                        cat backend/farmbti/.env
                        export $(grep -v '^#' backend/farmbti/.env | xargs)
                        '''
                    }
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend/farmbti') {
                    sh '''
                    #!/bin/bash
                    set -e
                    echo "✅ 백엔드 빌드 시작"
                    export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8"
                    export $(grep -v '^#' .env | xargs)
                    ./gradlew clean build
                    echo "✅ 빌드 완료"
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "✅ 기존 컨테이너 종료 및 삭제"
                    sh 'docker stop ${CONTAINER_NAME} || true'
                    sh 'docker rm ${CONTAINER_NAME} || true'

                    echo "✅ 배포 시작"
                    // Jenkins 워크스페이스에서 직접 docker-compose 실행
                    sh '''
                    #!/bin/bash
                    set -e
                    cd backend/farmbti
                    docker-compose down || true
                    docker-compose build --no-cache
                    docker-compose up -d
                    '''

                    echo "✅ 배포 완료!!"
                    sh 'docker ps -a | grep ${CONTAINER_NAME}'
                }
            }
        }
    }

    post {
        success {
            // 성공 시 앱 서버의 Git 저장소도 업데이트
            sh '''
            #!/bin/bash
            set -e
            if sudo -n true 2>/dev/null; then
                echo "✅ 앱 서버 Git 저장소 업데이트"
                sudo bash -c "cd /home/ubuntu/app/backend && git fetch --all && git reset --hard origin/backend"
            else
                echo "⚠️ sudo 권한이 없어 앱 서버 Git 저장소 업데이트를 건너뜁니다"
            fi
            '''
        }
    }
}