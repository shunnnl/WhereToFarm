pipeline {
    agent any

    environment {
        DOCKER_HUB_USERNAME = "nageum"  // Docker Hub 계정명 추가
        IMAGE_NAME = "farmbti_backend"
        CONTAINER_NAME = "farmbti-backend"
        PORT = "8081"
        GIT_CREDENTIALS_ID = 'gitlab-credentials'
        DOCKER_CREDENTIALS_ID = 'docker-hub'  // Docker Hub Credentials ID 추가
        DOCKER_COMPOSE_PATH = "/usr/local/bin/docker-compose"
    }

    stages {
        stage('Load Secrets from Jenkins') {
             steps {
                  script {
                       echo "✅ Jenkins 환경 변수 로드"
                       env.DB_URL = credentials('DB_URL')
                       env.DB_USERNAME = credentials('DB_USERNAME')
                       env.DB_PASSWORD = credentials('DB_PASSWORD')
                       env.REDIS_HOST = credentials('REDIS_HOST')
                       env.REDIS_PORT = credentials('REDIS_PORT')
                  }
             }
        }

        stage('Checkout Code') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'backend']],
                    userRemoteConfigs: [[
                    url: 'https://lab.ssafy.com/s12-bigdata-dist-sub1/S12P21D209.git',
                    credentialsId: 'gitlab-credentials'
                    ]]
                ])
                sh 'echo "✅ 코드 체크아웃 완료"'
            }
        }
        
        stage('Build Backend') {
            steps {
                dir("${env.WORKSPACE}/backend/farmbti") {
                    sh '''
                    #!/bin/bash
                    set -e
                    echo "✅ 백엔드 빌드 시작"
                    export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8"
                    export $(grep -v '^#' .env | xargs)
                    chmod +x gradlew  # 실행 권한 추가
                    ./gradlew clean bootJar -x test
                    echo "✅ 빌드 완료"
                    '''
                }
            }
        }

        stage('Build Docker Image') {
             steps {
                 dir('backend/farmbti') {
                     sh '''
                     #!/bin/bash
                     set -e
                     echo "✅ Docker 이미지 빌드 시작"
                     docker build -t ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest .
                     echo "✅ Docker 이미지 빌드 완료"
                     '''
                 }
             }
        }

        stage('Push Docker Image') {
             steps {
                  withDockerRegistry([credentialsId: DOCKER_CREDENTIALS_ID, url: 'https://index.docker.io/v1/']) {
                      sh '''
                      #!/bin/bash
                      set -e
                      echo "✅ Docker Hub에 이미지 푸시 중..."
                      docker push ${DOCKER_HUB_USERNAME}/${IMAGE_NAME}:latest
                      echo "✅ Docker 이미지 푸시 완료"
                      '''
                  }
             }
        }

        stage('Deploy') {
             steps {
                  script {
                       echo "✅ 빌드된 파일 확인"
                       sh 'ls -la backend/farmbti/build/libs/'

                       echo "✅ 배포 경로 확인 및 생성"
                       sh 'mkdir -p ~/app/backend/farmbti/build/libs/'

                       echo "✅ 빌드 파일 복사"
                       sh 'cp -f backend/farmbti/build/libs/*.jar ~/app/backend/farmbti/build/libs/'
                       sh 'cp -f backend/farmbti/docker-compose.yml ~/app/backend/farmbti/'
                       sh 'cp -f backend/farmbti/Dockerfile ~/app/backend/farmbti/'

                       echo "✅ 배포 시작"
                       sh 'cd ~/app/backend/farmbti/ && /var/jenkins_home/bin/docker-compose down || true'
                       sh 'cd ~/app/backend/farmbti/ && /var/jenkins_home/bin/docker-compose build --no-cache'
                       sh 'cd ~/app/backend/farmbti/ && /var/jenkins_home/bin/docker-compose up -d'

                       echo "✅ 배포 완료!!"
                       sh 'docker ps -a | grep farmbti-backend'
                  }
             }
        }
    }

}
